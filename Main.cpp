
#include "src/NeuralNetwork.cpp"

#include <iostream>
#include <fstream>
#include <ctime>

using namespace std;

typedef unsigned char uchar;

int nodeCounts[4] = {30,16,16,10};

NeuralNetwork* NN = new NeuralNetwork(4, 0.1, nodeCounts);

Vector* trainingData = new Vector(30);

Vector* answer = new Vector(10);

/*
 - For simplicity, training data is generated by this function.
 - It generates data based on a seed, then ramdomizes the data by
 - adding random decimal values and "offseting" the data.
*/
void createTrainingData(int seed){

    int offset = rand() % 10;
    
    for(int i = 0; i < 30; i++){

        trainingData->self[offset % 30] = (double)(i % ((seed + 1) * 2)) + (((double)(rand()) / (RAND_MAX + 1)) * (0.09 - 0.0001) + 0.0001);

        trainingData->self[offset % 30] /= 10;

        offset++;
        
    }

    answer->fill(0);
    answer->self[seed] = 1;

}


int main(){

    int option, seed, trainAmt;
    
    double cost;

    srand( time(NULL) );

    NN->load("dat/data.txt");

    //Simple command prompt interface
    while (true){
        
        cout<<"\nTest(0) Train(1) End(2): ";

        cin >> option;

        switch (option){

            //Test network
            case 0:

                cout << "\nSeed: ";

                cin >> seed;

                createTrainingData(seed);

                NN->setInput( trainingData, answer );

                NN->run();

                cout<<"\nOUTPUT LAYER";

                NN->printOutput();

                cout<<"\nNetwork Prediction: " << NN->predict() << "\n";
                
                break;

            //Train network
            case 1:

                cout<<"\nTraining iterations: ";

                cin >> trainAmt;

                for(int i = 0; i < trainAmt; i++){

                    cost = 0;

                    for(int k = 0; k < 100; k++){

                        createTrainingData(rand() % 10);

                        NN->setInput( trainingData, answer );

                        NN->train();

                        cost += NN->cost();

                    }

                    NN->applyGradient();

                    cost /= 100;

                }

                cout << "\nNetwork Cost: " << cost <<"\n";

                break;

            //Close and save
            case 2:

                NN->save("dat/data.txt");

                return 0;
       
        }

    }
    
}

